{"version":3,"sources":["../../src/app.ts"],"sourcesContent":["import express from 'express';\r\nimport {CREDENTIALS, LOG_FORMAT, NODE_ENV, ORIGIN, PORT} from \"@config\";\r\nimport {logger, stream} from \"@utils/logger\";\r\nimport { connect, set, disconnect } from 'mongoose';\r\nimport { dbConnection } from '@databases';\r\nimport {Routes} from \"@interfaces/routes.interface\";\r\nimport helmet from 'helmet';\r\nimport hpp from 'hpp';\r\nimport morgan from 'morgan';\r\nimport cors from 'cors';\r\nimport compression from 'compression';\r\n\r\n\r\n\r\nclass App {\r\n    public app: express.Application;\r\n    public env: string;\r\n    public port: string | number;\r\n\r\n    constructor(routes: Routes[]) {\r\n        this.app = express();\r\n        this.env = NODE_ENV || 'development';\r\n        this.port = PORT || 3000;\r\n\r\n        this.connectToDatabase().then(() => {logger.info(`MongoDB is ready ðŸ˜Ž`)});\r\n        this.initializeMiddlewares();\r\n        this.initializeRoutes(routes);\r\n    }\r\n\r\n    public listen() {\r\n        this.app.listen(this.port, () => {\r\n            logger.info(`=================================`);\r\n            logger.info(`======= ENV: ${this.env} =======`);\r\n            logger.info(`ðŸš€ App listening on the port ${this.port}`);\r\n            logger.info(`=================================`);\r\n        });\r\n    }\r\n\r\n    public async closeDatabaseConnection(): Promise<void> {\r\n        try {\r\n            await disconnect();\r\n            console.log('Disconnected from MongoDB');\r\n        } catch (error) {\r\n            console.error('Error closing database connection:', error);\r\n        }\r\n    }\r\n\r\n    public async connectToDatabase() {\r\n        if (this.env !== 'production') {\r\n            set('debug', true);\r\n        }\r\n\r\n        await connect(dbConnection.url);\r\n    }\r\n\r\n    private initializeRoutes(routes: Routes[]) {\r\n        routes.forEach(route => {\r\n            this.app.use('/api/v1/', route.router);\r\n        });\r\n    }\r\n\r\n    private initializeMiddlewares() {\r\n        this.app.use(morgan(LOG_FORMAT, { stream }));\r\n        this.app.use(cors({ origin: ORIGIN, credentials: CREDENTIALS }));\r\n        this.app.use(hpp());\r\n        this.app.use(helmet());\r\n        this.app.use(compression());\r\n        this.app.use(express.json());\r\n        this.app.use(express.urlencoded({ extended: true }));\r\n    }\r\n}\r\n\r\nexport default App;"],"names":["express","CREDENTIALS","LOG_FORMAT","NODE_ENV","ORIGIN","PORT","logger","stream","connect","set","disconnect","dbConnection","helmet","hpp","morgan","cors","compression","App","routes","app","env","port","connectToDatabase","then","info","initializeMiddlewares","initializeRoutes","listen","closeDatabaseConnection","error","console","log","url","forEach","route","use","router","origin","credentials","json","urlencoded","extended"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,aAAa,UAAU;AAC9B,SAAQC,WAAW,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,IAAI,QAAO,UAAU;AACxE,SAAQC,MAAM,EAAEC,MAAM,QAAO,gBAAgB;AAC7C,SAASC,OAAO,EAAEC,GAAG,EAAEC,UAAU,QAAQ,WAAW;AACpD,SAASC,YAAY,QAAQ,aAAa;AAE1C,OAAOC,YAAY,SAAS;AAC5B,OAAOC,SAAS,MAAM;AACtB,OAAOC,YAAY,SAAS;AAC5B,OAAOC,UAAU,OAAO;AACxB,OAAOC,iBAAiB,cAAc;AAItC,IAAA,AAAMC,oBAAN;;aAAMA,IAKUC,MAAgB;gCAL1BD;QACF,uBAAOE,OAAP,KAAA;QACA,uBAAOC,OAAP,KAAA;QACA,uBAAOC,QAAP,KAAA;QAGI,IAAI,CAACF,GAAG,GAAGnB;QACX,IAAI,CAACoB,GAAG,GAAGjB,YAAY;QACvB,IAAI,CAACkB,IAAI,GAAGhB,QAAQ;QAEpB,IAAI,CAACiB,iBAAiB,GAAGC,IAAI,CAAC;YAAOjB,OAAOkB,IAAI,CAAE;QAAqB;QACvE,IAAI,CAACC,qBAAqB;QAC1B,IAAI,CAACC,gBAAgB,CAACR;;kBAZxBD;;YAeKU,KAAAA;mBAAP,SAAOA;;gBACH,IAAI,CAACR,GAAG,CAACQ,MAAM,CAAC,IAAI,CAACN,IAAI,EAAE;oBACvBf,OAAOkB,IAAI,CAAE;oBACblB,OAAOkB,IAAI,CAAC,AAAC,gBAAwB,OAAT,MAAKJ,GAAG,EAAC;oBACrCd,OAAOkB,IAAI,CAAC,AAAC,0CAAyC,OAAV,MAAKH,IAAI;oBACrDf,OAAOkB,IAAI,CAAE;gBACjB;YACJ;;;YAEaI,KAAAA;mBAAb,SAAaA;uBAAb,oBAAA;wBAIaC;;;;;;;;;;gCAFL;;oCAAMnB;;;gCAAN;gCACAoB,QAAQC,GAAG,CAAC;;;;;;gCACPF;gCACLC,QAAQD,KAAK,CAAC,sCAAsCA;;;;;;;;;;;gBAE5D;;;;YAEaP,KAAAA;mBAAb,SAAaA;;uBAAb,oBAAA;;;;gCACI,IAAI,MAAKF,GAAG,KAAK,cAAc;oCAC3BX,IAAI,SAAS;gCACjB;gCAEA;;oCAAMD,QAAQG,aAAaqB,GAAG;;;gCAA9B;;;;;;gBACJ;;;;YAEQN,KAAAA;mBAAR,SAAQA,iBAAiBR,MAAgB;;gBACrCA,OAAOe,OAAO,CAACC,SAAAA;oBACX,MAAKf,GAAG,CAACgB,GAAG,CAAC,YAAYD,MAAME,MAAM;gBACzC;YACJ;;;YAEQX,KAAAA;mBAAR,SAAQA;gBACJ,IAAI,CAACN,GAAG,CAACgB,GAAG,CAACrB,OAAOZ,YAAY;oBAAEK,QAAAA;gBAAO;gBACzC,IAAI,CAACY,GAAG,CAACgB,GAAG,CAACpB,KAAK;oBAAEsB,QAAQjC;oBAAQkC,aAAarC;gBAAY;gBAC7D,IAAI,CAACkB,GAAG,CAACgB,GAAG,CAACtB;gBACb,IAAI,CAACM,GAAG,CAACgB,GAAG,CAACvB;gBACb,IAAI,CAACO,GAAG,CAACgB,GAAG,CAACnB;gBACb,IAAI,CAACG,GAAG,CAACgB,GAAG,CAACnC,QAAQuC,IAAI;gBACzB,IAAI,CAACpB,GAAG,CAACgB,GAAG,CAACnC,QAAQwC,UAAU,CAAC;oBAAEC,UAAU;gBAAK;YACrD;;;WAvDExB;;AA0DN,eAAeA,IAAI"}