{"version":3,"sources":["../../../src/controllers/task.controller.ts"],"sourcesContent":["import TaskService from \"@services/task.service\";\r\nimport {NextFunction, Request, Response} from \"express\";\r\nimport {Task} from \"@interfaces/task.interface\";\r\nimport {SECRET_KEY} from \"@config\";\r\nimport {verify} from \"jsonwebtoken\";\r\nimport {DataStoredInToken} from \"@interfaces/auth.interface\";\r\n\r\nclass TaskController {\r\n    public taskService = new TaskService();\r\n\r\n    public getTasks = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const Authorization = req.header('Authorization').split('Bearer ')[1];\r\n\r\n            const secretKey: string = SECRET_KEY;\r\n            const verificationResponse = verify(Authorization, secretKey) as DataStoredInToken;\r\n            const userId = verificationResponse._id;\r\n            const findAllTasksData: Task[] = await this.taskService.findAllTask(userId);\r\n            res.status(200).json({ data: findAllTasksData, message: \"findAll\"});\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    }\r\n\r\n    public createTask = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const createTaskData: Task = await this.taskService.createTask(req.body);\r\n            res.status(200).json({ data: createTaskData, message: \"create\" });\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    }\r\n\r\n    public deleteTask = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            await this.taskService.deleteTask(req.params.id);\r\n            res.status(200).json({ message: \"delete\" })\r\n        } catch (error) {\r\n            next(error)\r\n        }\r\n    }\r\n\r\n    public updateTask = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const updateTaskData: Task = await this.taskService.updateTask(req.params.id, req.body);\r\n            res.status(200).json({ data: updateTaskData, message: \"update\"});\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    }\r\n}\r\n\r\nexport default TaskController;"],"names":["TaskController","taskService","TaskService","getTasks","req","res","next","Authorization","header","split","secretKey","SECRET_KEY","verificationResponse","verify","userId","_id","findAllTasksData","findAllTask","status","json","data","message","error","createTask","createTaskData","body","deleteTask","params","id","updateTask","updateTaskData"],"mappings":";;;;+BAoDA;;;eAAA;;;oEApDwB;wBAGC;8BACJ;;;;;;;;;;;;;;;;;;;AAGrB,IAAA,AAAMA,iBAAN,MAAMA;;QACF,uBAAOC,eAAc,IAAIC,oBAAW;QAEpC,uBAAOC,YAAW,OAAOC,KAAcC,KAAeC;YAClD,IAAI;gBACA,MAAMC,gBAAgBH,IAAII,MAAM,CAAC,iBAAiBC,KAAK,CAAC,UAAU,CAAC,EAAE;gBAErE,MAAMC,YAAoBC,kBAAU;gBACpC,MAAMC,uBAAuBC,IAAAA,oBAAM,EAACN,eAAeG;gBACnD,MAAMI,SAASF,qBAAqBG,GAAG;gBACvC,MAAMC,mBAA2B,MAAM,IAAI,CAACf,WAAW,CAACgB,WAAW,CAACH;gBACpET,IAAIa,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMJ;oBAAkBK,SAAS;gBAAS;YACrE,EAAE,OAAOC,OAAO;gBACZhB,KAAKgB;YACT;QACJ;QAEA,uBAAOC,cAAa,OAAOnB,KAAcC,KAAeC;YACpD,IAAI;gBACA,MAAMkB,iBAAuB,MAAM,IAAI,CAACvB,WAAW,CAACsB,UAAU,CAACnB,IAAIqB,IAAI;gBACvEpB,IAAIa,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMI;oBAAgBH,SAAS;gBAAS;YACnE,EAAE,OAAOC,OAAO;gBACZhB,KAAKgB;YACT;QACJ;QAEA,uBAAOI,cAAa,OAAOtB,KAAcC,KAAeC;YACpD,IAAI;gBACA,MAAM,IAAI,CAACL,WAAW,CAACyB,UAAU,CAACtB,IAAIuB,MAAM,CAACC,EAAE;gBAC/CvB,IAAIa,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEE,SAAS;gBAAS;YAC7C,EAAE,OAAOC,OAAO;gBACZhB,KAAKgB;YACT;QACJ;QAEA,uBAAOO,cAAa,OAAOzB,KAAcC,KAAeC;YACpD,IAAI;gBACA,MAAMwB,iBAAuB,MAAM,IAAI,CAAC7B,WAAW,CAAC4B,UAAU,CAACzB,IAAIuB,MAAM,CAACC,EAAE,EAAExB,IAAIqB,IAAI;gBACtFpB,IAAIa,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMU;oBAAgBT,SAAS;gBAAQ;YAClE,EAAE,OAAOC,OAAO;gBACZhB,KAAKgB;YACT;QACJ;;AACJ;MAEA,WAAetB"}