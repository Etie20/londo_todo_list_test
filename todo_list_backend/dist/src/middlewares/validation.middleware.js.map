{"version":3,"sources":["../../../src/middlewares/validation.middleware.ts"],"sourcesContent":["import { plainToClass } from 'class-transformer';\r\nimport { validate, ValidationError } from 'class-validator';\r\nimport { RequestHandler } from 'express';\r\nimport { HttpException } from '@exceptions/HttpException';\r\n\r\nconst validationMiddleware = (\r\n    type: any,\r\n    value: string | 'body' | 'query' | 'params' = 'body',\r\n    skipMissingProperties = false,\r\n    whitelist = true,\r\n    forbidNonWhitelisted = true,\r\n): RequestHandler => {\r\n    return (req, res, next) => {\r\n        validate(plainToClass(type, req[value]), { skipMissingProperties, whitelist, forbidNonWhitelisted }).then((errors: ValidationError[]) => {\r\n            if (errors.length > 0) {\r\n                const message = errors.map((error: ValidationError) => Object.values(error.constraints)).join(', ');\r\n                next(new HttpException(400, message));\r\n            } else {\r\n                next();\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport default validationMiddleware;"],"names":["validationMiddleware","type","value","skipMissingProperties","whitelist","forbidNonWhitelisted","req","res","next","validate","plainToClass","then","errors","length","message","map","error","Object","values","constraints","join","HttpException"],"mappings":";;;;+BAwBA;;;eAAA;;;kCAxB6B;gCACa;+BAEZ;AAE9B,MAAMA,uBAAuB,CACzBC,MACAC,QAA8C,MAAM,EACpDC,wBAAwB,KAAK,EAC7BC,YAAY,IAAI,EAChBC,uBAAuB,IAAI;IAE3B,OAAO,CAACC,KAAKC,KAAKC;QACdC,IAAAA,wBAAQ,EAACC,IAAAA,8BAAY,EAACT,MAAMK,GAAG,CAACJ,MAAM,GAAG;YAAEC;YAAuBC;YAAWC;QAAqB,GAAGM,IAAI,CAAC,CAACC;YACvG,IAAIA,OAAOC,MAAM,GAAG,GAAG;gBACnB,MAAMC,UAAUF,OAAOG,GAAG,CAAC,CAACC,QAA2BC,OAAOC,MAAM,CAACF,MAAMG,WAAW,GAAGC,IAAI,CAAC;gBAC9FZ,KAAK,IAAIa,4BAAa,CAAC,KAAKP;YAChC,OAAO;gBACHN;YACJ;QACJ;IACJ;AACJ;MAEA,WAAeR"}