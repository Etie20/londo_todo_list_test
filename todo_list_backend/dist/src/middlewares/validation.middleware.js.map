{"version":3,"sources":["../../../src/middlewares/validation.middleware.ts"],"sourcesContent":["import { plainToClass } from 'class-transformer';\r\nimport { validate, ValidationError } from 'class-validator';\r\nimport { RequestHandler } from 'express';\r\nimport { HttpException } from '@exceptions/HttpException';\r\n\r\nconst validationMiddleware = (\r\n    type: any,\r\n    value: string | 'body' | 'query' | 'params' = 'body',\r\n    skipMissingProperties = false,\r\n    whitelist = true,\r\n    forbidNonWhitelisted = true,\r\n): RequestHandler => {\r\n    return (req, res, next) => {\r\n        validate(plainToClass(type, req[value]), { skipMissingProperties, whitelist, forbidNonWhitelisted }).then((errors: ValidationError[]) => {\r\n            if (errors.length > 0) {\r\n                const message = errors.map((error: ValidationError) => Object.values(error.constraints)).join(', ');\r\n                next(new HttpException(400, message));\r\n            } else {\r\n                next();\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport default validationMiddleware;"],"names":["plainToClass","validate","HttpException","validationMiddleware","type","value","skipMissingProperties","whitelist","forbidNonWhitelisted","req","res","next","then","errors","length","message","map","error","Object","values","constraints","join"],"mappings":"AAAA,SAASA,YAAY,QAAQ,oBAAoB;AACjD,SAASC,QAAQ,QAAyB,kBAAkB;AAE5D,SAASC,aAAa,QAAQ,4BAA4B;AAE1D,IAAMC,uBAAuB,SACzBC;QACAC,yEAA8C,QAC9CC,yFAAwB,OACxBC,6EAAY,MACZC,wFAAuB;IAEvB,OAAO,SAACC,KAAKC,KAAKC;QACdV,SAASD,aAAaI,MAAMK,GAAG,CAACJ,MAAM,GAAG;YAAEC,uBAAAA;YAAuBC,WAAAA;YAAWC,sBAAAA;QAAqB,GAAGI,IAAI,CAAC,SAACC;YACvG,IAAIA,OAAOC,MAAM,GAAG,GAAG;gBACnB,IAAMC,UAAUF,OAAOG,GAAG,CAAC,SAACC;2BAA2BC,OAAOC,MAAM,CAACF,MAAMG,WAAW;mBAAGC,IAAI,CAAC;gBAC9FV,KAAK,IAAIT,cAAc,KAAKa;YAChC,OAAO;gBACHJ;YACJ;QACJ;IACJ;AACJ;AAEA,eAAeR,qBAAqB"}